openapi: 3.0.3
info:
  title: DropInDrop WhatsApp E-commerce API
  description: API for managing WhatsApp-based e-commerce operations including products, drops, orders, and delivery verification
  version: 1.0.0
  contact:
    name: DropInDrop API Support
    email: support@dropindrop.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.dropindrop.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
        role:
          type: string
          enum: [SUPER_ADMIN, ADMIN, DELIVERY_MANAGER, CLIENT]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 5
          maxLength: 200
        description:
          type: string
        price:
          type: number
          minimum: 0
          maximum: 999999.99
        sku:
          type: string
          maxLength: 50
        categoryId:
          type: string
          format: uuid
        images:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
        isActive:
          type: boolean
        stockQuantity:
          type: integer
          minimum: 0
        viewCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        parentId:
          type: string
          format: uuid
        sortOrder:
          type: integer
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Drop:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 200
        scheduledDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [DRAFT, SCHEDULED, SENT, CANCELLED]
        sentAt:
          type: string
          format: date-time
        messageId:
          type: string
          maxLength: 100
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderNumber:
          type: string
          pattern: '^ORD-\d{8}-\d{4}$'
        customerId:
          type: string
          format: uuid
        status:
          type: string
          enum: [PENDING, PAID, DELIVERED, CANCELLED]
        totalAmount:
          type: number
          minimum: 0
        paymentIntentId:
          type: string
          maxLength: 100
        paidAt:
          type: string
          format: date-time
        deliveredAt:
          type: string
          format: date-time
        deliveredBy:
          type: string
          format: uuid
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        qrCodeData:
          type: string
        uniqueCode:
          type: string
          pattern: '^[A-Z]{4}-\d{4}$'
        isUsed:
          type: boolean
        usedAt:
          type: string
          format: date-time
        usedBy:
          type: string
          format: uuid
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    WhatsAppGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 100
        chatId:
          type: string
          pattern: '^\d+@g\.us$'
        description:
          type: string
        isActive:
          type: boolean
        memberCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
        code:
          type: string

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object

paths:
  # Authentication endpoints
  /auth/admin/login:
    post:
      summary: Admin login
      description: Authenticate admin user and return JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
                          accessToken:
                            type: string
                          refreshToken:
                            type: string
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/client/send-otp:
    post:
      summary: Send OTP for client authentication
      description: Send WhatsApp OTP to client phone number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phoneNumber
              properties:
                phoneNumber:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "400":
          description: Invalid phone number
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/client/verify-otp:
    post:
      summary: Verify OTP for client authentication
      description: Verify OTP code and create client session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phoneNumber
                - otp
              properties:
                phoneNumber:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
                otp:
                  type: string
                  pattern: '^\d{6}$'
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
                          accessToken:
                            type: string
        "401":
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Product management endpoints
  /products:
    get:
      summary: List products
      description: Get paginated list of products with optional category filtering
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          products:
                            type: array
                            items:
                              $ref: "#/components/schemas/Product"
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer

    post:
      summary: Create product
      description: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - categoryId
                - images
              properties:
                name:
                  type: string
                  minLength: 5
                  maxLength: 200
                description:
                  type: string
                price:
                  type: number
                  minimum: 0
                  maximum: 999999.99
                sku:
                  type: string
                  maxLength: 50
                categoryId:
                  type: string
                  format: uuid
                images:
                  type: array
                  items:
                    type: string
                    format: uri
                  minItems: 1
                stockQuantity:
                  type: integer
                  minimum: 0
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Product"

  /products/{id}:
    get:
      summary: Get product details
      description: Get detailed information about a specific product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Product"

    put:
      summary: Update product
      description: Update an existing product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 5
                  maxLength: 200
                description:
                  type: string
                price:
                  type: number
                  minimum: 0
                  maximum: 999999.99
                sku:
                  type: string
                  maxLength: 50
                categoryId:
                  type: string
                  format: uuid
                images:
                  type: array
                  items:
                    type: string
                    format: uri
                  minItems: 1
                stockQuantity:
                  type: integer
                  minimum: 0
                isActive:
                  type: boolean

    delete:
      summary: Delete product
      description: Delete a product (soft delete)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"

  # Category management endpoints
  /categories:
    get:
      summary: List categories
      description: Get hierarchical list of product categories
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Category"

  # Drop management endpoints
  /drops:
    get:
      summary: List drops
      description: Get drops with optional date filtering for calendar view
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, SCHEDULED, SENT, CANCELLED]
      responses:
        "200":
          description: Drops retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Drop"

    post:
      summary: Create drop
      description: Create a new drop with selected products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productIds
                - scheduledDate
              properties:
                name:
                  type: string
                  maxLength: 200
                productIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                scheduledDate:
                  type: string
                  format: date-time
                groupIds:
                  type: array
                  items:
                    type: string
                    format: uuid

  /drops/{id}:
    get:
      summary: Get drop details
      description: Get detailed information about a specific drop including products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Drop retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Drop"
                          - type: object
                            properties:
                              products:
                                type: array
                                items:
                                  $ref: "#/components/schemas/Product"

    post:
      summary: Send drop to WhatsApp
      description: Send drop to selected WhatsApp groups
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupIds
              properties:
                groupIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1

  # WhatsApp group management endpoints
  /whatsapp/groups:
    get:
      summary: List WhatsApp groups
      description: Get all configured WhatsApp groups
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Groups retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/WhatsAppGroup"

  # Order management endpoints
  /orders:
    get:
      summary: List orders
      description: Get orders with filtering and pagination
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, PAID, DELIVERED, CANCELLED]
        - name: customerId
          in: query
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orders:
                            type: array
                            items:
                              $ref: "#/components/schemas/Order"
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer

  /orders/{id}:
    get:
      summary: Get order details
      description: Get detailed information about a specific order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Order"
                          - type: object
                            properties:
                              customer:
                                $ref: "#/components/schemas/User"
                              items:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    product:
                                      $ref: "#/components/schemas/Product"
                                    quantity:
                                      type: integer
                                    unitPrice:
                                      type: number
                                    totalPrice:
                                      type: number
                              ticket:
                                $ref: "#/components/schemas/Ticket"

  # Ticket verification endpoints
  /tickets/verify:
    post:
      summary: Verify ticket for delivery
      description: Verify ticket using QR code data or unique code
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                qrCodeData:
                  type: string
                uniqueCode:
                  type: string
                  pattern: '^[A-Z]{4}-\d{4}$'
      responses:
        "200":
          description: Ticket verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ticket:
                            $ref: "#/components/schemas/Ticket"
                          order:
                            $ref: "#/components/schemas/Order"
                          customer:
                            $ref: "#/components/schemas/User"
        "400":
          description: Invalid ticket or already used
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Client order endpoints
  /client/orders:
    get:
      summary: Get client orders
      description: Get current client's orders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          orders:
                            type: array
                            items:
                              $ref: "#/components/schemas/Order"
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer

  /client/tickets:
    get:
      summary: Get client tickets
      description: Get current client's delivery tickets
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Tickets retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Ticket"

  # Public product viewing endpoints (no auth required)
  /public/products/{uniqueLink}:
    get:
      summary: Get product for public viewing
      description: Get product details for WhatsApp link sharing (increments view count)
      parameters:
        - name: uniqueLink
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Product"

  /public/orders:
    post:
      summary: Create order for product
      description: Create order and initiate payment for a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - customerInfo
              properties:
                productId:
                  type: string
                  format: uuid
                customerInfo:
                  type: object
                  properties:
                    name:
                      type: string
                    phoneNumber:
                      type: string
                      pattern: '^\+[1-9]\d{1,14}$'
                    email:
                      type: string
                      format: email
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          order:
                            $ref: "#/components/schemas/Order"
                          paymentUrl:
                            type: string
                            format: uri
        "400":
          description: Invalid product or customer information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Analytics endpoints
  /analytics/products/views:
    get:
      summary: Get product view analytics
      description: Get view statistics for products
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Analytics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              format: uuid
                            productName:
                              type: string
                            viewCount:
                              type: integer
                            categoryName:
                              type: string

  /analytics/drops/performance:
    get:
      summary: Get drop performance analytics
      description: Get performance metrics for sent drops
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Analytics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Success"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            dropId:
                              type: string
                              format: uuid
                            dropName:
                              type: string
                            sentDate:
                              type: string
                              format: date-time
                            totalProducts:
                              type: integer
                            soldProducts:
                              type: integer
                            totalViews:
                              type: integer
                            conversionRate:
                              type: number
