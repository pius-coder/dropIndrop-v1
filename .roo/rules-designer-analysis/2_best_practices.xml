<best_practices>
  <general_principles>
    <principle priority="high">
      <name>Strict Design Replication</name>
      <description>Maintain pixel-perfect accuracy with the original HTML design</description>
      <rationale>Ensures design consistency and prevents visual regressions</rationale>
      <example>
        <scenario>Original design has 16px margin</scenario>
        <good>className="m-4" (Tailwind m-4 = 16px)</good>
        <bad>className="m-3" (Tailwind m-3 = 12px)</bad>
      </example>
    </principle>

    <principle priority="high">
      <name>Shadcn First Approach</name>
      <description>Use Shadcn UI components as the primary building blocks</description>
      <rationale>Ensures consistency, accessibility, and maintainability</rationale>
      <example>
        <scenario>Need a styled button</scenario>
        <good><Button variant="primary">Click me</Button></good>
        <bad><button className="bg-blue-500 text-white px-4 py-2 rounded"></bad>
      </example>
    </principle>

    <principle priority="high">
      <name>Tailwind Only Styling</name>
      <description>No inline styles - use Tailwind utility classes exclusively</description>
      <rationale>Consistent styling approach and better maintainability</rationale>
      <example>
        <scenario>Custom spacing needed</scenario>
        <good>className="px-6 py-3"</good>
        <bad>style={{padding: '12px 24px'}}</bad>
      </example>
    </principle>
  </general_principles>

  <component_guidelines>
    <guideline category="shadcn_integration">
      <rule>Install Shadcn components before using them</rule>
      <command>npx shadcn-ui@latest add button card alert</command>
      <rationale>Ensures proper component setup and theming</rationale>
    </guideline>

    <guideline category="custom_components">
      <rule>Create custom components when Shadcn doesn't provide exact match</rule>
      <template>
        <code>
import { cn } from "@/lib/utils"

interface CustomComponentProps extends React.HTMLAttributes<div> {
  variant?: "primary" | "secondary"
  children: React.ReactNode
}

export function CustomComponent({
  className,
  variant = "primary",
  children,
  ...props
}: CustomComponentProps) {
  return (
    <div
      className={cn(
        "base-classes",
        variant === "primary" && "primary-classes",
        variant === "secondary" && "secondary-classes",
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}
        </code>
      </template>
    </guideline>

    <guideline category="responsive_design">
      <rule>Use mobile-first approach with Tailwind responsive prefixes</rule>
      <examples>
        <good>className="text-sm md:text-base lg:text-lg"</good>
        <bad>Different components for mobile/desktop</bad>
      </examples>
    </guideline>
  </component_guidelines>

  <styling_conventions>
    <convention category="color_mapping">
      <rule>Map design colors to nearest Tailwind color palette</rule>
      <examples>
        <mapping>#2563eb → blue-600</mapping>
        <mapping>#ef4444 → red-500</mapping>
        <mapping>#22c55e → green-500</mapping>
      </examples>
    </convention>

    <convention category="spacing_system">
      <rule>Use Tailwind spacing scale (4px increments)</rule>
      <scale>4px, 8px, 12px, 16px, 20px, 24px, 32px, 40px, 48px, 64px</scale>
      <classes>m-1(4px), m-2(8px), m-3(12px), m-4(16px), m-5(20px), etc.</classes>
    </convention>

    <convention category="typography">
      <rule>Use Tailwind text utilities for consistent typography</rule>
      <examples>
        <heading>className="text-3xl font-bold tracking-tight"</heading>
        <body>className="text-base leading-relaxed"</body>
      </examples>
    </convention>
  </styling_conventions>

  <accessibility_standards>
    <standard>
      <rule>Add semantic HTML elements and ARIA attributes</rule>
      <examples>
        <semantic><nav>, <main>, <section>, <article></semantic>
        <aria>aria-label, aria-expanded, role attributes</aria>
      </examples>
    </standard>

    <standard>
      <rule>Ensure keyboard navigation support</rule>
      <requirement>tabindex, focus states, keyboard event handlers</requirement>
    </standard>
  </accessibility_standards>

  <performance_considerations>
    <consideration>
      <name>Component Optimization</name>
      <practices>
        <practice>Use React.memo for expensive components</practice>
        <practice>Implement proper key props in lists</practice>
        <practice>Lazy load heavy components</practice>
      </practices>
    </consideration>

    <consideration>
      <name>Bundle Size</name>
      <practices>
        <practice>Import only needed Shadcn components</practice>
        <practice>Use tree shaking friendly imports</practice>
        <practice>Avoid unnecessary dependencies</practice>
      </practices>
    </consideration>
  </performance_considerations>

  <quality_checklist>
    <category name="design_accuracy">
      <item>Colors match original design exactly</item>
      <item>Spacing and sizing are pixel-perfect</item>
      <item>Typography matches specifications</item>
      <item>Layout responsive across breakpoints</item>
    </category>
    <category name="code_quality">
      <item>No inline styles used</item>
      <item>Shadcn components used appropriately</item>
      <item>Components are properly typed</item>
      <item>Clean, readable component structure</item>
    </category>
    <category name="accessibility">
      <item>Semantic HTML structure</item>
      <item>ARIA attributes added where needed</item>
      <item>Keyboard navigation works</item>
      <item>Screen reader compatible</item>
    </category>
  </quality_checklist>
</best_practices>